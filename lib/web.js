// Generated by CoffeeScript 1.12.4
var $catch, $host, forData;

$host = null;

$catch = null;

exports.host = function(host) {
  var last, len;
  len = host.length;
  last = host[len - 1];
  if (last !== '/') {
    host += '/';
  }
  return $host = host;
};

exports["catch"] = function(catchFn) {
  return $catch = catchFn;
};

exports.fromDataURL = function(dataUrl) {
  var base64, base64Wrapped;
  base64 = dataUrl.replace(/data:.*;base64,/, '');
  base64Wrapped = "\/Base64(" + base64 + ")\/";
  return base64Wrapped;
};

exports.call = function(name, data) {
  var onFailure, onSuccess, token, url, xhr;
  if (typeof data === 'function') {
    onFailure = onSuccess;
    onSuccess = data;
    data = {};
  }
  if (data == null) {
    data = {};
  }
  if (onSuccess == null) {
    onSuccess = function() {};
  }
  if (onFailure == null) {
    onFailure = function() {};
  }
  forData(data, function(value, key, parent) {
    var date, timeStamp;
    if (value instanceof Date) {
      date = value;
      timeStamp = date.getTime();
      return parent[key] = "\/Date(" + timeStamp + ")\/";
    }
  });
  url = "" + $host + name;
  data = JSON.stringify(data);
  xhr = new XMLHttpRequest();
  xhr.open('POST', url, true);
  xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
  token = localStorage.getItem('Rubic-Token');
  if (token) {
    xhr.setRequestHeader('Rubic-Token', token);
  }
  xhr.send(data);
  return new Promise(function(resolve, reject) {
    return xhr.onreadystatechange = function() {
      var error;
      if (xhr.readyState === XMLHttpRequest.DONE) {
        token = xhr.getResponseHeader('Rubic-Token');
        if (token) {
          localStorage.setItem('Rubic-Token', token);
        }
        if (xhr.status === 204) {
          resolve();
        }
        if (xhr.status === 200) {
          data = JSON.parse(xhr.responseText);
          forData(data, function(value, key, parent) {
            var timeStamp;
            if (/^\/Date\(\d+\)\/$/.test(value)) {
              value = value.slice(6, value.length - 2);
              timeStamp = parseInt(value);
              return parent[key] = new Date(timeStamp);
            }
          });
          resolve(data);
        }
        if (xhr.status >= 400) {
          error = JSON.parse(xhr.responseText);
          reject(error);
          if ($catch) {
            return $catch(error);
          }
        }
      }
    };
  });
};

forData = function(tree, callback) {
  var forEach;
  forEach = function(node, key, parent) {
    var child, childKey, i, j, len1, results, results1, type;
    type = typeof node;
    if (type === 'boolean' || type === 'number' || type === 'string' || node instanceof Date) {
      return callback(node, key, parent);
    } else if (Array.isArray(node)) {
      results = [];
      for (i = j = 0, len1 = node.length; j < len1; i = ++j) {
        child = node[i];
        results.push(forEach(child, i, node));
      }
      return results;
    } else if (typeof node === 'object') {
      results1 = [];
      for (childKey in node) {
        child = node[childKey];
        results1.push(forEach(child, childKey, node));
      }
      return results1;
    }
  };
  return forEach(tree, null, null);
};
